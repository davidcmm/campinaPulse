cat("<br/>")
library("ggplot2")
library("dplyr")
library("knitr")
library("texreg")
library("ineq")
library(R.utils)
library("knitr")
library("spdep")
library("reshape")
library("fitdistrplus")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
best_folder <- "../percepcaoLocal/agradavel/melhores/intersects/"
worst_folder <- "../percepcaoLocal/agradavel/piores/intersects/"
show_street_data <- function (current_df, all_data, force_split, highlighted_positive, best_folder, worst_folder){
color_space <- c("#000000", "#001900", "#003300", "#004c00", "#006600", "#007f00", "#009900", "#00b200", "#00cc00", "#00e500", "#00ff00")
step <- (max(all_data$qscore) - min(all_data$qscore)) / length(color_space)
thresholds <- seq(min(all_data$qscore), max(all_data$qscore), step)
cat("<div class='row'>")
angleData = c()
for(i in 1:nrow(current_df)) {
row <- current_df[i,]
street <- as.character(row$street)
photo_name <- as.character(row$photo_name)#photo_name <- as.character(row$url)
number <- row$num
angl <- row$angle
score <- row$qscore
angleData <- append(angleData, score)
filtered <- filter(highlighted_positive, num==number & angle == angl)
folder <- "none"
if (nrow(filtered) > 0){
color_index <- 11
if (file.exists(paste(best_folder, photo_name, sep=""))){
url <- paste(best_folder, photo_name, sep="")
folder <- "best"
}else if (file.exists(paste(worst_folder, photo_name, sep=""))){
url <- paste(worst_folder, photo_name, sep="")
folder <- "worst"
}else{
url <- as.character(row$url)
}
}else{
color_index <- 1
if (file.exists(paste(worst_folder, photo_name, sep=""))){
url <- paste(worst_folder, photo_name, sep="")
folder <- "worst"
}else if (file.exists(paste(best_folder, photo_name, sep=""))){
url <- paste(best_folder, photo_name, sep="")
folder <- "best"
}else{
url <- as.character(row$url)
}
}
cat(paste("<div class='col-xs-3' style=\"background-color:", color_space[color_index],"\">", sep=""))
cat("<img src='", url,"' width='300px'>", sep = "")
cat("<p style=\"color:white;font-size:90%\">", number, "-", angl, "-> ", score,  "</p>", sep="")
cat("</div>")
#End of row with 4 images
if(force_split && i%%4 == 0){
cat("<div class=\"col-xs-12\" style=\"height:1000px;\"></div>")
}
}
}
scores_data <- read.table("../all100/all_ordenado.dat")
scores_data$sd <- apply(scores_data[,4:ncol(scores_data)], 1, sd)
scores_data$n <- ( 1.96 * scores_data$sd / 0.2) ** 2  #All QScores
scores_data$ci <- scores_data$sd * 1.96 / sqrt(100)
novoV2 <- lapply(as.character(scores_data$V2), function (x) strsplit(x, split="/", fixed=TRUE)[[1]][7])
novoV2 <- unlist(lapply(novoV2, '[[', 1))
novoV2 <- strsplit(novoV2, split="\\.jpg")
photo <- unlist(lapply(novoV2, '[[', 1))
scores_data$photo_name <- photo
scores_data <- arrange(scores_data, photo_name)
qscoresDFGeral <- read.csv("../qscores-df-geral.csv", header = TRUE)
qscoresDFCampina<- read.csv("../qscores-df-campina.csv", header = TRUE)
qscoresDFNotCampina <- read.csv("../qscores-df-notcampina.csv", header = TRUE)
#Plotting Q-Scores through the street
all_data <- merge(qscoresDFGeral, scores_data, by.x = "url", by.y="V2")#qscoresDFGeral
all_data$street <- as.character(all_data$street)
all_data$street <- factor(all_data$street, levels=unique(all_data$street))
cristina <- dplyr::filter(all_data, street == "R._Cristina_ProcÃ³pio_Silva") %>% dplyr::group_by(num) %>% dplyr::arrange(street, num, angle) %>% dplyr::select(url, photo_name, street, num, angle, qscore, V3, ci)
cat("<br/>")
max_point <- filter(cristina, qscore == max(cristina$qscore))
cat(paste("<div class='col-xs-6' style=\"background-color:", "#00ff00","\">", sep=""))
cat("<img src='", as.character(max_point$url),"' width='600px'>", sep = "")
cat("<p style=\"color:black;font-size:90%\">", max_point$num, "- ", max_point$angle, "-", max_point$qscore,  "</p>", sep="")
cat("</div>")
min_point <- filter(cristina, qscore == min(cristina$qscore))
cat(paste("<div class='col-xs-6' style=\"background-color:", "#000000","\">", sep=""))
cat("<img src='", as.character(min_point$url),"' width='600px'>", sep = "")
cat("<p style=\"color:white;font-size:90%\">", min_point$num, "- ", min_point$angle, "-", min_point$qscore,  "</p>", sep="")
cat("</div>")
cat("<br/>")
cat("<br/>")
highlighted_positive <- data.frame(num=c(2,2, 66, 66, 66, 261, 261, 261, 305, 305, 436, 436, 436), angle=c(135, 225, 45, 315, 225, 22, 315, 225, 45, 293, 22, 135, 315))
show_street_data(cristina, all_data, TRUE, highlighted_positive, best_folder, worst_folder)
all_data$photo_name
install.packages("nonnest2")
nmm<-matrix(c(1,1,NA,1,2,2,3,2,3,3,3,3,3,3,3,3,2,2,2,2,1,2,3,4,4,4,4,4,
1,1,2,1,2,2,2,2,NA,5,5,5,NA,NA,1,1,NA,NA,3,NA),nrow=4)
library("irr")
nmm
kripp.alpha(nmm)
rater1 = c(1,2,3,4,5,6,7,8,9) # rater one's ratings
rater2 = c(1,3,1,6,1,5,5,6,7) # rater one's ratings
cohen.kappa(x=cbind(rater1,rater2))
library("psych")
rater1 = c(1,2,3,4,5,6,7,8,9) # rater one's ratings
rater2 = c(1,3,1,6,1,5,5,6,7) # rater one's ratings
cohen.kappa(x=cbind(rater1,rater2))
cbind(rater1,rater2)
library("vioplot")
library("ggplot2")
library("dplyr")
library("knitr")
library("texreg")
library("ineq")
library(R.utils)
library("spdep")
library("reshape")
library("fitdistrplus")
library("plotly")
library("caret")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
aida <- read.csv("entrevista/aida_cristina.csv", header=FALSE)
mariana <- read.csv("entrevista/mariana_cristina.csv", header=FALSE)
confusionMatrix(aida$V2, mariana$V2)
cohen.kappa(x=cbind(aida$V2, mariana$V2))
rbind(aida$V2, mariana$V2)
kripp.alpha(rbind(aida$V2, mariana$V2))
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(1, 0, -1, 436, 210, "hom", "mediana") ) )
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(1, 0, -1, 436, 210, "het", "mediana") ) )
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(1, 0, -1, 436, 210, "het", "med para ruim") ) )
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(1, 0, -1, 436, 180, "het", "med para ruim") ) )
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(1, 0, 1, 436, 180, "het", "med para ruim") ) )
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(1, 0, 1, 200, 180, "het", "med para ruim") ) )
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(1, 1, 1, 200, 180, "het", "med para ruim") ) )
kripp.alpha( rbind( c(1, 0, -1, 436, 210, "hom", "mediana"), c(-1, 1, 1, 200, 180, "het", "med para ruim") ) )
aida <- read.table("retestes/aida_floriano.csv")
aida
aida <- read.csv("retestes/aida_floriano.csv", header=FALSE)
aida
kripp.alpha(x=rbind(aida$V2, aida$V2))
cohen.kappa(cbind(aida$V2, aida$V2))
confusionMatrix(aida$V2, mariana$V2)
aida$V2
library("vioplot")
library("ggplot2")
library("dplyr")
library("knitr")
library("texreg")
library("ineq")
library(R.utils)
library("spdep")
library("reshape")
library("fitdistrplus")
library("plotly")
library("caret")
library("psych")
library("irr")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
aida <- read.csv("entrevista/aida_cristina.csv", header=FALSE)
mariana <- read.csv("entrevista/mariana_cristina.csv", header=FALSE)
aida$V2
mariana$V2
confusionMatrix(aida$V2, mariana$V2)
confusionMatrix(aida$V2, mariana$V2, aida$V2)
